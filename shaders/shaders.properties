# Copyright 2020 Ovizro
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# =============================================================================
#  PLEASE FOLLOW THE LICENSE AND PLEASE DO NOT REMOVE THE LICENSE HEADER
# =============================================================================
#  ANY USE OF THE SHADER ONLINE OR OFFLINE IS CONSIDERED AS INCLUDING THE CODE
#  IF YOU DOWNLOAD THE SHADER, IT MEANS YOU AGREE AND OBSERVE THIS LICENSE
# =============================================================================

clouds              = off
dynamicHandLight    = true
oldLighting         = false
underwaterOverlay   = false
sun                 = false
moon                = true
sky                 = true
vignette            = false
separateAo			= true

#alphaTest.gbuffers_basic=off
#alphaTest.gbuffers_textured=off
#alphaTest.gbuffers_textured_lit=off
#alphaTest.gbuffers_terrain=off
alphaTest.gbuffers_skybasic=off
alphaTest.gbuffers_skytextured=off
#alphaTest.gbuffers_hand=off
#alphaTest.gbuffers_entities=off

##=============uniform=============##

#	Time----
variable.float.sunRise0 =	clamp((worldTime * 1.0 - 23200.0) / 400.0, 	0.0, 1.0)
variable.float.sunRise1 = 	clamp((worldTime * 1.0			) / 2000.0, 0.0, 1.0)
variable.float.sunRise2 = 	clamp((worldTime * 1.0 - 23000.0) / 1000.0, 0.0, 1.0)
variable.float.sunSet0 	= 	clamp((worldTime * 1.0 - 10000.0) / 2000.0, 0.0, 1.0)
variable.float.sunSet1 	= 	clamp((worldTime * 1.0 - 12600.0) / 170.0, 	0.0, 1.0)
variable.float.sunSet2 	= 	clamp((worldTime * 1.0 - 12500.0) / 250.0, 	0.0, 1.0)
variable.float.moonRise0	= 	clamp((worldTime * 1.0 - 12890.0) / 210.0, 	0.0, 1.0)
variable.float.moonRise1 	= 	clamp((worldTime * 1.0 - 13250.0) / 1000.0,	0.0, 1.0)
variable.float.moonSet0 	= 	clamp((worldTime * 1.0 - 21000.0) / 1500.0, 0.0, 1.0)
variable.float.moonSet1 	= 	clamp((worldTime * 1.0 - 22700.0) / 400.0, 	0.0, 1.0)

uniform.vec4.Time = vec4((sunRise0 * sunRise0 * (3.0 - 2.0 * sunRise0) + 1.0 - sunRise1), \
	(sunRise1 - sunSet0), \
	(sunSet0 - sunSet1 * sunSet1 *(3.0 - 2.0 * sunSet1)), \
	(sunSet1 * sunSet1 * (3.0 - 2.0 * sunSet1) - sunRise0 * sunRise0 * (3.0 - 2.0 * sunRise0)))
uniform.vec4.nTime = vec4((moonRise0 * moonRise0 * (3.0 - 2.0 * moonRise0) - moonRise1), \
	(moonRise1 - moonSet0), \
	(moonSet0 - moonSet1 * moonSet1 *(3.0 - 2.0 * moonSet1)), \
	(moonSet1 * moonSet1 * (3.0 - 2.0 * moonSet1) + 1.0 - moonRise0 * moonRise0 * (3.0 - 2.0 * moonRise0)))
uniform.vec4.SunTime0 = vec4((sunRise2 * sunRise2 * (3.0 - 2.0 * sunRise2) + 1.0 - sunRise1), \
	(sunRise1 - sunSet0), \
	(sunSet0 - sunSet2 * sunSet2 *(3.0 - 2.0 * sunSet2)), \
	(sunSet2 * sunSet2 * (3.0 - 2.0 * sunSet2) - sunRise2 * sunRise2 * (3.0 - 2.0 * sunRise2)))

#	pixel----
uniform.vec2.pixel = vec2(1.0 / viewWidth, 1.0 / viewHeight)

#	biome----
variable.float.biomeTem = clamp(smooth(0, temperature, 12.0, 12.0), 0.0, 1.0)
variable.float.biomeRainfall = clamp(smooth(3, rainfall, 12.0, 12.0), 0.0, 1.0)
variable.float.biomeRS = if(\
	temperature > 0.95, 0.0, \
	temperature < 0.15, 0.5, \
	1.0)
#uniform.float.AdjTemp = temperature
#uniform.float.AdjRainfall = clamp(min(1.0, biomeRS * 2.0), 0.0, 1.0) * AdjTemp
uniform.vec3.BiomeType = vec3(biomeRainfall, smooth(1, biomeRS, 12.0, 12.0), biomeTem)

#	vignette----
uniform.float.valLive = if(is_alive, 1.0, 0.0)
variable.float.valHurt = min(smooth(2, if(is_hurt, 1.3, 0), 0, 4), 1)
uniform.vec3.vignetteColor = vec3(0.2 * valHurt, 0.0, 0.0)

#	light vector----
uniform.float.fov = atan(1.0 / gbufferProjection.1.1)
uniform.float.mulfov = if(\
	isEyeInWater > 1, gbufferProjection.1.1 * tan(fov * 0.85), \
	1.0)

variable.float.sunVectorNorm = 1.0 / sqrt((sunPosition.x * sunPosition.x) + (sunPosition.y * sunPosition.y) + (sunPosition.z * sunPosition.z))
uniform.vec3.sunVectorView = vec3(sunPosition.x * sunVectorNorm, sunPosition.y * sunVectorNorm, sunPosition.z * sunVectorNorm)
variable.float.sunVectorX = gbufferModelViewInverse.0.0 * sunPosition.x + gbufferModelViewInverse.1.0 * sunPosition.y + gbufferModelViewInverse.2.0 * sunPosition.z
variable.float.sunVectorY = gbufferModelViewInverse.0.1 * sunPosition.x + gbufferModelViewInverse.1.1 * sunPosition.y + gbufferModelViewInverse.2.1 * sunPosition.z
variable.float.sunVectorZ = gbufferModelViewInverse.0.2 * sunPosition.x + gbufferModelViewInverse.1.2 * sunPosition.y + gbufferModelViewInverse.2.2 * sunPosition.z
uniform.vec3.sunVector = vec3(sunVectorX * sunVectorNorm, sunVectorY * sunVectorNorm, sunVectorZ * sunVectorNorm)

variable.float.moonVectorNorm = 1.0 / sqrt((moonPosition.x * moonPosition.x) + (moonPosition.y * moonPosition.y) + (moonPosition.z * moonPosition.z))
uniform.vec3.moonVectorView = vec3(moonPosition.x * moonVectorNorm, moonPosition.y * moonVectorNorm, moonPosition.z * moonVectorNorm)
variable.float.moonVectorX = gbufferModelViewInverse.0.0 * moonPosition.x + gbufferModelViewInverse.1.0 * moonPosition.y + gbufferModelViewInverse.2.0 * moonPosition.z
variable.float.moonVectorY = gbufferModelViewInverse.0.1 * moonPosition.x + gbufferModelViewInverse.1.1 * moonPosition.y + gbufferModelViewInverse.2.1 * moonPosition.z
variable.float.moonVectorZ = gbufferModelViewInverse.0.2 * moonPosition.x + gbufferModelViewInverse.1.2 * moonPosition.y + gbufferModelViewInverse.2.2 * moonPosition.z
uniform.vec3.moonVector = vec3(moonVectorX * moonVectorNorm, moonVectorY * moonVectorNorm, moonVectorZ * moonVectorNorm)

variable.float.shadowLightVectorNorm = 1.0 / sqrt((shadowLightPosition.x * shadowLightPosition.x) + (shadowLightPosition.y * shadowLightPosition.y) + (shadowLightPosition.z * shadowLightPosition.z))
uniform.vec3.shadowLightVectorView = vec3(shadowLightPosition.x * moonVectorNorm, shadowLightPosition.y * moonVectorNorm, shadowLightPosition.z * moonVectorNorm)
variable.float.shadowLightVectorX = gbufferModelViewInverse.0.0 * shadowLightPosition.x + gbufferModelViewInverse.1.0 * shadowLightPosition.y + gbufferModelViewInverse.2.0 * shadowLightPosition.z
variable.float.shadowLightVectorY = gbufferModelViewInverse.0.1 * shadowLightPosition.x + gbufferModelViewInverse.1.1 * shadowLightPosition.y + gbufferModelViewInverse.2.1 * shadowLightPosition.z
variable.float.shadowLightVectorZ = gbufferModelViewInverse.0.2 * shadowLightPosition.x + gbufferModelViewInverse.1.2 * shadowLightPosition.y + gbufferModelViewInverse.2.2 * shadowLightPosition.z
uniform.vec3.shadowLightVector = vec3(shadowLightVectorX * shadowLightVectorNorm, shadowLightVectorY * shadowLightVectorNorm, shadowLightVectorZ * shadowLightVectorNorm)

##=============sliders=============##
sliders = HALF_PUPIL_DISTANCE EYE_3D_VIEW_WIDE SEPARATE_VIEWPORT_INDEX VIEWPORT_SCALE

##=============screen=============##
screen = [EYE_3D_OPTION] NORMALS SPECULAR_TO_PBR_CONVERSION CONTINUUM2_TEXTURE_FORMAT shadowMapResolution shadowDistance SHADOW_FILTER

screen.EYE_3D_OPTION = EYE_3D <empty> FOCUSSING_HELP HALF_PUPIL_DISTANCE <empty> SEPARATE_VIEWPORT_INDEX EYE_3D_VIEW_WIDE VIEWPORT_SCALE
screen.EYE_3D_OPTION.columns=1